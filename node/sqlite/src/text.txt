这是我的手动创建的文件这是我的手动创建的文件
=== Node.js 可读流测试数据 ===

第一段：基础文本数据
这是一段用于测试Node.js可读流功能的文本数据。
可读流是Node.js中处理数据的重要方式之一。
通过流，我们可以高效地处理大量数据而不需要将所有数据加载到内存中。

第二段：多行文本测试
行1：这是第一行测试数据
行2：这是第二行测试数据  
行3：这是第三行测试数据
行4：这是第四行测试数据
行5：这是第五行测试数据

第三段：包含特殊字符的数据
特殊字符测试：!@#$%^&*()_+-=[]{}|;:'"<>?,.
中文字符测试：你好世界，Node.js流处理测试
数字测试：1234567890
混合测试：Hello世界123!@#

第四段：JSON格式的测试数据
{"name": "张三", "age": 25, "city": "北京"}
{"name": "李四", "age": 30, "city": "上海"}
{"name": "王五", "age": 28, "city": "广州"}
{"name": "赵六", "age": 32, "city": "深圳"}

第五段：较长的段落测试
这是一个相对较长的段落，用于测试流在处理大块数据时的表现。在实际应用中，我们经常需要处理各种大小的数据块。Node.js的流机制可以帮助我们高效地处理这些数据，无论是读取文件、网络传输还是数据转换。流的优势在于它可以边读边处理，而不需要等待所有数据都加载完成。

第六段：重复数据模拟
数据块1: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
数据块2: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
数据块3: CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
数据块4: DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
数据块5: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

第七段：模拟日志数据
[2024-01-15 10:30:00] INFO: 应用启动成功
[2024-01-15 10:30:01] INFO: 数据库连接建立
[2024-01-15 10:30:02] WARN: 内存使用率较高
[2024-01-15 10:30:03] ERROR: 连接超时
[2024-01-15 10:30:04] INFO: 重新连接成功

第八段：CSV格式数据
姓名,年龄,职业,薪资
张三,25,程序员,15000
李四,30,设计师,12000
王五,28,产品经理,18000
赵六,32,运营,10000

第九段：测试边界情况
空行测试：


制表符测试：	这里有制表符	分隔的内容
换行符测试：
第一行
第二行
第三行

第十段：结束标记
=== 测试数据结束 ===
文件总行数大约100行左右
适合测试各种流处理场景
包含多种数据格式和特殊字符这是我的手动创建的文件这是我的手动创建的文件
=== Node.js 可读流测试数据 ===

第一段：基础文本数据
这是一段用于测试Node.js可读流功能的文本数据。
可读流是Node.js中处理数据的重要方式之一。
通过流，我们可以高效地处理大量数据而不需要将所有数据加载到内存中。

第二段：多行文本测试
行1：这是第一行测试数据
行2：这是第二行测试数据  
行3：这是第三行测试数据
行4：这是第四行测试数据
行5：这是第五行测试数据

第三段：包含特殊字符的数据
特殊字符测试：!@#$%^&*()_+-=[]{}|;:'"<>?,.
中文字符测试：你好世界，Node.js流处理测试
数字测试：1234567890
混合测试：Hello世界123!@#

第四段：JSON格式的测试数据
{"name": "张三", "age": 25, "city": "北京"}
{"name": "李四", "age": 30, "city": "上海"}
{"name": "王五", "age": 28, "city": "广州"}
{"name": "赵六", "age": 32, "city": "深圳"}

第五段：较长的段落测试
这是一个相对较长的段落，用于测试流在处理大块数据时的表现。在实际应用中，我们经常需要处理各种大小的数据块。Node.js的流机制可以帮助我们高效地处理这些数据，无论是读取文件、网络传输还是数据转换。流的优势在于它可以边读边处理，而不需要等待所有数据都加载完成。

第六段：重复数据模拟
数据块1: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
数据块2: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
数据块3: CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
数据块4: DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
数据块5: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

第七段：模拟日志数据
[2024-01-15 10:30:00] INFO: 应用启动成功
[2024-01-15 10:30:01] INFO: 数据库连接建立
[2024-01-15 10:30:02] WARN: 内存使用率较高
[2024-01-15 10:30:03] ERROR: 连接超时
[2024-01-15 10:30:04] INFO: 重新连接成功

第八段：CSV格式数据
姓名,年龄,职业,薪资
张三,25,程序员,15000
李四,30,设计师,12000
王五,28,产品经理,18000
赵六,32,运营,10000

第九段：测试边界情况
空行测试：


制表符测试：	这里有制表符	分隔的内容
换行符测试：
第一行
第二行
第三行

第十段：结束标记
=== 测试数据结束 ===
文件总行数大约100行左右
适合测试各种流处理场景
包含多种数据格式和特殊字符这是我的手动创建的文件这是我的手动创建的文件
=== Node.js 可读流测试数据 ===

第一段：基础文本数据
这是一段用于测试Node.js可读流功能的文本数据。
可读流是Node.js中处理数据的重要方式之一。
通过流，我们可以高效地处理大量数据而不需要将所有数据加载到内存中。

第二段：多行文本测试
行1：这是第一行测试数据
行2：这是第二行测试数据  
行3：这是第三行测试数据
行4：这是第四行测试数据
行5：这是第五行测试数据

第三段：包含特殊字符的数据
特殊字符测试：!@#$%^&*()_+-=[]{}|;:'"<>?,.
中文字符测试：你好世界，Node.js流处理测试
数字测试：1234567890
混合测试：Hello世界123!@#

第四段：JSON格式的测试数据
{"name": "张三", "age": 25, "city": "北京"}
{"name": "李四", "age": 30, "city": "上海"}
{"name": "王五", "age": 28, "city": "广州"}
{"name": "赵六", "age": 32, "city": "深圳"}

第五段：较长的段落测试
这是一个相对较长的段落，用于测试流在处理大块数据时的表现。在实际应用中，我们经常需要处理各种大小的数据块。Node.js的流机制可以帮助我们高效地处理这些数据，无论是读取文件、网络传输还是数据转换。流的优势在于它可以边读边处理，而不需要等待所有数据都加载完成。

第六段：重复数据模拟
数据块1: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
数据块2: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
数据块3: CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
数据块4: DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
数据块5: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

第七段：模拟日志数据
[2024-01-15 10:30:00] INFO: 应用启动成功
[2024-01-15 10:30:01] INFO: 数据库连接建立
[2024-01-15 10:30:02] WARN: 内存使用率较高
[2024-01-15 10:30:03] ERROR: 连接超时
[2024-01-15 10:30:04] INFO: 重新连接成功

第八段：CSV格式数据
姓名,年龄,职业,薪资
张三,25,程序员,15000
李四,30,设计师,12000
王五,28,产品经理,18000
赵六,32,运营,10000

第九段：测试边界情况
空行测试：


制表符测试：	这里有制表符	分隔的内容
换行符测试：
第一行
第二行
第三行

第十段：结束标记
=== 测试数据结束 ===
文件总行数大约100行左右
适合测试各种流处理场景
包含多种数据格式和特殊字符这是我的手动创建的文件这是我的手动创建的文件
=== Node.js 可读流测试数据 ===

第一段：基础文本数据
这是一段用于测试Node.js可读流功能的文本数据。
可读流是Node.js中处理数据的重要方式之一。
通过流，我们可以高效地处理大量数据而不需要将所有数据加载到内存中。

第二段：多行文本测试
行1：这是第一行测试数据
行2：这是第二行测试数据  
行3：这是第三行测试数据
行4：这是第四行测试数据
行5：这是第五行测试数据

第三段：包含特殊字符的数据
特殊字符测试：!@#$%^&*()_+-=[]{}|;:'"<>?,.
中文字符测试：你好世界，Node.js流处理测试
数字测试：1234567890
混合测试：Hello世界123!@#

第四段：JSON格式的测试数据
{"name": "张三", "age": 25, "city": "北京"}
{"name": "李四", "age": 30, "city": "上海"}
{"name": "王五", "age": 28, "city": "广州"}
{"name": "赵六", "age": 32, "city": "深圳"}

第五段：较长的段落测试
这是一个相对较长的段落，用于测试流在处理大块数据时的表现。在实际应用中，我们经常需要处理各种大小的数据块。Node.js的流机制可以帮助我们高效地处理这些数据，无论是读取文件、网络传输还是数据转换。流的优势在于它可以边读边处理，而不需要等待所有数据都加载完成。

第六段：重复数据模拟
数据块1: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
数据块2: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
数据块3: CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
数据块4: DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
数据块5: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

第七段：模拟日志数据
[2024-01-15 10:30:00] INFO: 应用启动成功
[2024-01-15 10:30:01] INFO: 数据库连接建立
[2024-01-15 10:30:02] WARN: 内存使用率较高
[2024-01-15 10:30:03] ERROR: 连接超时
[2024-01-15 10:30:04] INFO: 重新连接成功

第八段：CSV格式数据
姓名,年龄,职业,薪资
张三,25,程序员,15000
李四,30,设计师,12000
王五,28,产品经理,18000
赵六,32,运营,10000

第九段：测试边界情况
空行测试：


制表符测试：	这里有制表符	分隔的内容
换行符测试：
第一行
第二行
第三行

第十段：结束标记
=== 测试数据结束 ===
文件总行数大约100行左右
适合测试各种流处理场景
包含多种数据格式和特殊字符